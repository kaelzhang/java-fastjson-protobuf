def GROUP = 'ai.ost'
def NAME = 'fastjson-protobuf'
def VERSION = '0.1.3'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE"
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
  }
}

[
  'java-library',
  'idea',
  'com.google.protobuf',
  'org.springframework.boot',
  'io.spring.dependency-management',
  'jacoco',
  'maven-publish',
  'signing'
].each {
  apply plugin: it
}

def PROTOC_VERSION = '3.5.1-1'
def PROTOBUF_VERSION = '3.5.1'
def GRPC_VERSION = '1.14.0'
def FASTJSON_VERSION = '1.2.49'

group = "${GROUP}"
version = "${VERSION}"

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${PROTOC_VERSION}"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${GRPC_VERSION}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

springBoot {
  mainClassName = 'ai.ost.fastjson_protobuf.TestApplication'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
  compile "com.google.protobuf:protobuf-java-util:${PROTOBUF_VERSION}"
  compile "org.apache.directory.studio:org.apache.commons.io:2.4"
  compile 'org.springframework:spring-webmvc:5.0.8.RELEASE'
  compile "com.alibaba:fastjson:${FASTJSON_VERSION}"

  // tests
  testCompile "org.springframework.boot:spring-boot-starter-web"
  testCompile "io.grpc:grpc-protobuf:${GRPC_VERSION}"
  testCompile "org.springframework.boot:spring-boot-starter-test"
  testCompile "io.grpc:grpc-testing:${GRPC_VERSION}"

  testCompile files("build/classes/java/test/ai/ost/test_vo")
}

sourceSets {
  test {
    proto {
      srcDir "src/test/proto"
    }
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
  def mainSrc = "${project.projectDir}/src/main/java"

  classDirectories = files([debugTree])
  sourceDirectories = files([mainSrc])
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId = "${NAME}"

      from components.java

      artifact (sourcesJar) {
        classifier = 'sources'
      }

      pom {
        name = 'FastJson Protobuf'
        description = 'Spring `HttpMessageConverter` implementation with Alibaba FastJson and serializer/deserializer of Protobuf Messages.'
        url = 'https://github.com/kaelzhang/java-fastjson-protobuf'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'kaelzhang'
            name = 'Kael Zhang'
            email = 'i+maven-central@kael.me'
          }
        }
        scm {
          connection = 'scm:git:git://github.com.com/kaelzhang/java-fastjson-protobuf.git'
          developerConnection = 'scm:git:ssh://github.com.com/kaelzhang/java-fastjson-protobuf.git'
          url = 'https://github.com/kaelzhang/java-fastjson-protobuf'
        }
      }
    }
  }

  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username "${sonatypeUsername}"
        password "${sonatypePassword}"
      }
    }
  }
}

jar {
  doFirst {
    tasks['generatePomFileForMavenPublication'].execute()
  }

  into("META-INF/maven/${project.group}/${project.name}") {
    from {
      generatePomFileForMavenPublication
    }
    rename ".*", "pom.xml"
  }
}

signing {
  sign publishing.publications.maven
}
